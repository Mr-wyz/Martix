//create by Wen Yaozhi for Data Structure 2023
#include <iostream>
#include "function.h"
#include<iomanip>

using namespace std;
using T = double;
int main()
{	
	int m_row, m_col;
	cout << "请输入矩阵的行数: " << endl;
	cin >> m_row;
	cout << "请输入矩阵的列数: " << endl;
		cin >> m_col;
	Matrix<double> a(m_row,m_col);
	cout << "请输入矩阵: " << endl;
	cin >> a;
	cout << "矩阵a如下所示：" << endl;
	cout << a;
//////////////////////////////////////////////////////////////////////////////////////////////////////////
	cout << "******************************" << endl;
	cout << "得到矩阵的某一行" << endl;
	cout << "******************************" << endl;
	cout <<"请输入要得到的行数: " <<endl;
	int row;
	cin >>row;
	cout <<"矩阵a的第" <<row <<"行为：" <<endl;
	cout <<a.getMRow(row-1);//以直观角度确定第几行第几列
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
	cout << "******************************" << endl;
	cout << "得到矩阵的某一列" << endl;
	cout << "******************************" << endl;
	cout << "请输入要得到的列数: " << endl;
	int col;
	cin >> col;
	cout <<"矩阵a的第" <<col <<"列为：" <<endl;
	cout <<a.getMCol(col-1);
///////////////////////////////////////////////////////////////////////////////////////////////////////////
	cout << "******************************" << endl;
	cout << "矩阵得到子矩阵" << endl;
	cout << "******************************" << endl;
	cout << a.subMatrix(1, 1, 2, 2);
	//矩阵的加减乘除
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////
	cout << "******************************" << endl;
	cout << "矩阵的加减乘除" << endl;
	cout << "******************************" << endl;
	Matrix<double> b1(m_row,m_col);
	cout <<"请输入矩阵b: " <<endl;
	cin >>b1;
	cout <<"矩阵b如下所示：" <<endl;
	cout <<b1;
	cout <<"矩阵a+b如下所示：" <<endl;
	cout <<a+b1;
	cout <<"矩阵a-b如下所示：" <<endl;
	cout <<a-b1;
	cout <<"矩阵a*b如下所示：" <<endl;
	cout <<a*b1;
	cout <<"矩阵a/b如下所示：" <<endl;
	cout <<a/b1;
 	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	cout << "******************************" << endl;
	cout << "矩阵与标量的加减乘除" << endl;
	cout << "******************************" << endl;
	cout <<"请输入标量: " <<endl;
	double scalar;
	cin >>scalar;
	cout <<"矩阵a+标量" <<scalar <<"如下所示：" <<endl;
	cout << a.add(scalar);
	cout <<"矩阵a-标量" <<scalar <<"如下所示：" <<endl;
	cout << a.sub(scalar);
	cout <<"矩阵a*标量" <<scalar <<"如下所示：" <<endl;
	cout << a.mul(scalar);
	cout <<"矩阵a/标量" <<scalar <<"如下所示：" <<endl;
	cout << a.div(scalar);
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////
	cout << "******************************" << endl;
	cout << "矩阵整体的最大值，以及最大值位置" << endl;
	cout << "******************************" << endl;
	cout << "矩阵a的最大值为：" << a.max().max << " " << "位于第" << a.max().row + 1 << "行，第" << a.max().col + 1 << "列" << endl;
	cout << endl;
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////
	cout << "******************************" << endl;
	cout << "矩阵整体的最小值，以及最小值位置" << endl;
	cout << "******************************" << endl;
	cout << "矩阵a的最小值为：" << a.min().min<< " " <<"位于第" <<a.min().row + 1 << "行，第" << a.min().col + 1 << "列" << endl;
	cout << endl;
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////
	cout << "******************************" << endl;
	cout << "矩阵整体的平均值，以及最接近平均值的数，以及位置" << endl;
	cout << "******************************" << endl;
	cout << "矩阵a的平均值为：" << a.avg().avg << endl;
	cout<<"最接近平均值的数为："<<a.avg().avgNum << "  " << "位于第" << a.avg().row + 1 << "行，第" << a.avg().col + 1 << "列" << endl;
	cout<<endl;
////////////////////////////////////////////////////////////////////////////////////////////////////////////
	cout << "******************************" << endl;
	cout << "矩阵整体查找" << endl;
	cout << "******************************" << endl;
	cout << "请输入要查找的元素值：" << endl;
	double num;
	cin >>num;
	MatFind<double> find;
	find = a.find(num);
	cout << "矩阵a中" << find.find << "所在的行为：" << find.row + 1 << "," << "所在的列为：" << find.col + 1 << endl;
	cout << endl;
//////////////////////////////////////////////////////////////////////////////////////////////////////////
	cout << "******************************" << endl;
	cout << "矩阵转置" << endl;
	cout << "******************************" << endl;
	cout << "矩阵a的转置为：" << endl;
	cout << a.transpose();
	cout << endl;
//////////////////////////////////////////////////////////////////////////////////////////////////////////
	cout << "******************************" << endl;
	cout << "矩阵求逆" << endl;
	cout << "******************************" << endl;
	cout << "请输入新的矩阵b" << endl;
	Matrix<double> b(2, 2);
	cin >> b;
	cout << "矩阵b如下所示：" << endl;
	cout << b;
	cout << "矩阵b的逆为：" << endl;
	cout << b.inverse();
	cout << endl;
//////////////////////////////////////////////////////////////////////////////////////////////////////////
	cout << "******************************" << endl;
	cout << "求行列式" << endl;
	cout << "******************************" << endl;
	cout << "b的行列值为" << endl;
	cout << b.det();
	cout << endl;
//////////////////////////////////////////////////////////////////////////////////////////////////////////
	cout << "******************************" << endl;
	cout << "设置矩阵中的某个元素（更改）" << endl;
	cout << "******************************" << endl;
	cout << "请输入要更改的元素的行数：" << endl;
	int row1;
	cin >> row1;
	cout << "请输入要更改的元素的列数：" << endl;
	int col1;
	cin >> col1;
	cout << "请输入要更改的元素的值：" << endl;
	double num1;
	cin >> num1;
	a.set(row1 - 1, col1 - 1, num1);	
	cout << "更改后的矩阵a为：" << endl;
	cout << a;
	cout << endl;
//////////////////////////////////////////////////////////////////////////////////////////////////////////
	cout << "******************************" << endl;
	cout << "矩阵增加一行" << endl;
	cout << "******************************" << endl;
	cout << "请输入要增加到的行数：" << endl;
	int row2;
	cin >> row2;
	cout << "请输入要增加的行的元素：" << endl;
	Matrix<double> c(1, a.getCol());
	cin >> c;
	cout << "增加后的矩阵a为：" << endl;
	cout << a.addRow(row2 - 1, c);
	cout << endl;
///////////////////////////////////////////////////////////////////////////////////////////////////////////
	cout << "******************************" << endl;
	cout << "矩阵增加一列" << endl;
	cout << "******************************" << endl;
	cout << "请输入要增加到的列数：" << endl;
	int col2;
	cin >> col2;
	cout << "请输入要增加的列的元素：" << endl;
	Matrix<double> d(a.getRow(), 1);
	cin >> d;
	cout << "增加后的矩阵a为：" << endl;
	cout << a.addCol(col2 - 1, d);
///////////////////////////////////////////////////////////////////////////////////////////////////////////
	cout << "******************************" << endl;
	cout << "矩阵删除一行" << endl;
	cout << "******************************" << endl;
	cout << "请输入要删除的行数：" << endl;
	int row3;
	cin >> row3;
	cout << "删除后的矩阵a为：" << endl;
	cout << a.deleteRow(row3 - 1);
	cout<<endl;
//////////////////////////////////////////////////////////////////////////////////////////////////////////
	cout << "******************************" << endl;
	cout << "矩阵删除一列" << endl;
	cout << "******************************" << endl;
	cout << "请输入要删除的列数：" << endl;
	int col3;
	cin >> col3;
	cout << "删除后的矩阵a为：" << endl;
	cout << a.deleteCol(col3 - 1);
	cout << endl;
	求矩阵a的秩
	/*cout<<a.Rank()<<endl;*/
//////////////////////////////////////////////////////////////////////////////////////////////////////////
	cout << "******************************" << endl;
	cout << "矩阵的LU分解" << endl;
	cout << "******************************" << endl;
	cout << "请输入新的矩阵b" << endl;
	Matrix<double> b(3, 3);
	cin >> b;
	cout << "矩阵b如下所示：" << endl;
	cout << b;
	if (b.getCol()==b.getRow()&&b.Rank()==b.getRow())
	{
		cout << "矩阵b的LU分解为：" << endl;
		Matrix<T> L(b.getRow(), b.getCol());
		Matrix<T> U(b.getRow(), b.getCol());
		b.LU(L, U);
		cout << "L矩阵为：" << endl;
		cout << L;
		cout << "U矩阵为：" << endl;
		cout << U;
	}
	else
	{
		if (b.getCol() != b.getRow())
		{
			cout << "非方阵，无法进行LU分解" << endl;
		}
		else
		{
			cout << "非满秩矩阵，无法进行LU分解" << endl;
		}
	}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
    cout<< "******************************" << endl;
	cout << "矩阵的QR分解" << endl;
	cout << "******************************" << endl;
	cout << "请输入新的矩阵b" << endl;
	Matrix<double> b(3,3);
	cin >> b;
	cout << "矩阵b如下所示：" << endl;
	cout << b;
	//判断是否为列满秩
	if (b.Rank()<min(b.getRow(), b.getCol()))
	{
		cout << "非列满秩矩阵，无法进行QR分解" << endl;
		
	}
	else
	{
	cout << "矩阵b的QR分解为：" << endl;
	Matrix<double> Q(b.getRow(), b.getCol());
	Matrix<double> R(b.getRow(), b.getCol());
	b.QR(Q, R);
	cout << "Q矩阵为：" << endl;
	cout << Q;
	cout << "R矩阵为：" << endl;
	cout << R;
	}
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	cout<< "******************************" << endl;
	cout << "矩阵的SVD分解" << endl;
	cout << "******************************" << endl;
	cout << "请输入新的矩阵d" << endl;
	Matrix<double> d(3, 3);
	cin >> d;
	cout << "矩阵d如下所示：" << endl;
	cout << d;
	Matrix<double> U(d.getRow(), d.getRow());
	Matrix<double> S(d.getRow(), d.getCol());
	Matrix<double> V(d.getCol(), d.getCol());
////////////////////////////////////////////////////////////////////////////////////////////////////////////
	cout << "******************************" << endl;
	cout << "求矩阵的特征值" << endl;
	cout << "******************************" << endl;
	cout << "请输入新的矩阵d" << endl;
	Matrix<double> d(2, 2);
	cin >> d;
	cout << "矩阵d如下所示：" << endl;
	cout << d;
	Matrix<double> Q(d.getCol(), d.getCol());
	Matrix<double> R(d.getCol(), d.getCol());
	Matrix<double> L(d.getCol(), d.getCol());
	d.Eigen(Q, R,L);
	cout << "特征向量矩阵Q为：" << endl;
	cout << Q;
	cout << "特征值矩阵L为：" << endl;
	cout << L;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////

	return 0;
}